// <auto-generated />
using System;
using DaisyDBProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DaisyDBProject.Migrations
{
    [DbContext(typeof(DaisyContext))]
    [Migration("20200913074531_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DaisyDBProject.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("administrator_id")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("email_address")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Nickname")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'admin'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("PhoneNum")
                        .HasColumnName("phone_num")
                        .HasColumnType("varchar(14)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("AdministratorId");

                    b.ToTable("administrator");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Application", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ProjectId", "GroupId", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.HasIndex("GroupId", "ProjectId")
                        .HasName("group_id");

                    b.ToTable("application");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("MomentId")
                        .HasColumnName("moment_id")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("CommentId");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.HasIndex("MomentId")
                        .HasName("moment_id");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("discussion_id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("PictureUrl")
                        .HasColumnName("picture_url")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("DiscussionId", "ProjectId")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.HasIndex("ProjectId")
                        .HasName("project_id");

                    b.ToTable("discussion");
                });

            modelBuilder.Entity("DaisyDBProject.Models.FavouritePackage", b =>
                {
                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Privacy")
                        .HasColumnName("privacy")
                        .HasColumnType("varchar(7)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(6)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Account", "Name")
                        .HasName("PRIMARY");

                    b.ToTable("favourite_package");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Follow", b =>
                {
                    b.Property<string>("FollowedAccount")
                        .HasColumnName("followed_account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("FollowedAccount", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("follow");
                });

            modelBuilder.Entity("DaisyDBProject.Models.GroupMessage", b =>
                {
                    b.Property<int>("GroupMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("group_message_id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("GroupMessageId");

                    b.HasIndex("GroupId", "ProjectId")
                        .HasName("group_id");

                    b.ToTable("group_message");
                });

            modelBuilder.Entity("DaisyDBProject.Models.LeaveMessage", b =>
                {
                    b.Property<int>("LeaveMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("leave_message_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("ReadTag")
                        .HasColumnName("read_tag")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("LeaveMessageId");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("leave_message");
                });

            modelBuilder.Entity("DaisyDBProject.Models.LiftBan", b =>
                {
                    b.Property<int>("LiftBanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lift_ban_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("DealStatus")
                        .HasColumnName("deal_status")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("LiftBanId");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("lift_ban");
                });

            modelBuilder.Entity("DaisyDBProject.Models.LikeDisc", b =>
                {
                    b.Property<int>("DiscussionId")
                        .HasColumnName("discussion_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.HasKey("DiscussionId", "Account", "ProjectId")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.HasIndex("DiscussionId", "ProjectId")
                        .HasName("discussion_id");

                    b.ToTable("like_disc");
                });

            modelBuilder.Entity("DaisyDBProject.Models.LikeMoment", b =>
                {
                    b.Property<int>("MomentId")
                        .HasColumnName("moment_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("MomentId", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("like_moment");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Member", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ProjectId", "GroupId", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.HasIndex("GroupId", "ProjectId")
                        .HasName("group_id");

                    b.ToTable("member");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("message_id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("ReadTag")
                        .HasColumnName("read_tag")
                        .HasColumnType("int");

                    b.Property<string>("ReceiveAccount")
                        .IsRequired()
                        .HasColumnName("receive_account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("SendAccount")
                        .IsRequired()
                        .HasColumnName("send_account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiveAccount")
                        .HasName("receive_account");

                    b.HasIndex("SendAccount")
                        .HasName("send_account");

                    b.ToTable("message");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Moment", b =>
                {
                    b.Property<int>("MomentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("moment_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("MomentId");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("moment");
                });

            modelBuilder.Entity("DaisyDBProject.Models.MomentStar", b =>
                {
                    b.Property<int>("MomentId")
                        .HasColumnName("moment_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("MomentId", "Account", "Name")
                        .HasName("PRIMARY");

                    b.HasIndex("Account", "Name")
                        .HasName("account");

                    b.ToTable("moment_star");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Notice", b =>
                {
                    b.Property<int>("NoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notice_id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("NoticeId");

                    b.ToTable("notice");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Notification", b =>
                {
                    b.Property<int>("NotifiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notifi_id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("NotifiId", "ProjectId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProjectId")
                        .HasName("project_id");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("MaxMemberNum")
                        .HasColumnName("max_member_num")
                        .HasColumnType("int");

                    b.Property<string>("PostTime")
                        .HasColumnName("post_time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("PostId", "ProjectId", "GroupId")
                        .HasName("PRIMARY");

                    b.HasIndex("GroupId", "ProjectId")
                        .HasName("group_id");

                    b.ToTable("post");
                });

            modelBuilder.Entity("DaisyDBProject.Models.PostStar", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ProjectId", "GroupId", "Account", "PostId", "Name")
                        .HasName("PRIMARY");

                    b.HasIndex("Account", "Name")
                        .HasName("account");

                    b.HasIndex("PostId", "ProjectId", "GroupId")
                        .HasName("post_id");

                    b.ToTable("post_star");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Host")
                        .HasColumnName("host")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Introduction")
                        .HasColumnName("introduction")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("ParticipantsNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("participants_number")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ProjectId");

                    b.ToTable("project");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reply_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("CommentId")
                        .HasColumnName("comment_id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ReplyId");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.HasIndex("CommentId")
                        .HasName("comment_id");

                    b.ToTable("reply");
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReplyReply", b =>
                {
                    b.Property<int>("IdToReply")
                        .HasColumnName("id_to_reply")
                        .HasColumnType("int");

                    b.Property<int>("IdReplied")
                        .HasColumnName("id_replied")
                        .HasColumnType("int");

                    b.HasKey("IdToReply", "IdReplied")
                        .HasName("PRIMARY");

                    b.HasIndex("IdReplied")
                        .HasName("id_replied");

                    b.ToTable("reply_reply");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("DealStatus")
                        .HasColumnName("deal_status")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnName("report_type")
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ReportId");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("report");
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportCom", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnName("comment_id")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "CommentId")
                        .HasName("PRIMARY");

                    b.HasIndex("CommentId")
                        .HasName("comment_id");

                    b.ToTable("report_com");
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportDisc", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<int>("DiscussionId")
                        .HasColumnName("discussion_id")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "ProjectId", "DiscussionId")
                        .HasName("PRIMARY");

                    b.HasIndex("DiscussionId", "ProjectId")
                        .HasName("discussion_id");

                    b.ToTable("report_disc");
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportMom", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<int>("MomentId")
                        .HasColumnName("moment_id")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "MomentId")
                        .HasName("PRIMARY");

                    b.HasIndex("MomentId")
                        .HasName("moment_id");

                    b.ToTable("report_mom");
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportReply", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnName("report_id")
                        .HasColumnType("int");

                    b.Property<int>("ReplyId")
                        .HasColumnName("reply_id")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "ReplyId")
                        .HasName("PRIMARY");

                    b.HasIndex("ReplyId")
                        .HasName("reply_id");

                    b.ToTable("report_reply");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Subscribe", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ProjectId", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("subscribe");
                });

            modelBuilder.Entity("DaisyDBProject.Models.UserGroupMessage", b =>
                {
                    b.Property<int>("GroupMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("group_message_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("GroupMessageId", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("user_group_message");
                });

            modelBuilder.Entity("DaisyDBProject.Models.UserNotice", b =>
                {
                    b.Property<int>("NoticeId")
                        .HasColumnName("notice_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("ReadTag")
                        .HasColumnName("read_tag")
                        .HasColumnType("int");

                    b.HasKey("NoticeId", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.ToTable("user_notice");
                });

            modelBuilder.Entity("DaisyDBProject.Models.UserNotifi", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<int>("NotifiId")
                        .HasColumnName("notifi_id")
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("ReadTag")
                        .HasColumnName("read_tag")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "NotifiId", "Account")
                        .HasName("PRIMARY");

                    b.HasIndex("Account")
                        .HasName("account");

                    b.HasIndex("NotifiId", "ProjectId")
                        .HasName("notifi_id");

                    b.ToTable("user_notifi");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Usergroups", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .HasColumnName("introduction")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("LeaderAccount")
                        .IsRequired()
                        .HasColumnName("leader_account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("GroupId", "ProjectId")
                        .HasName("PRIMARY");

                    b.HasIndex("LeaderAccount")
                        .HasName("leader_account");

                    b.HasIndex("ProjectId")
                        .HasName("project_id");

                    b.ToTable("usergroups");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Users", b =>
                {
                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("College")
                        .HasColumnName("college")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("email_address")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("Grade")
                        .HasColumnName("grade")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .HasColumnName("icon_url")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Intro")
                        .HasColumnName("intro")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("PhoneNum")
                        .HasColumnName("phone_num")
                        .HasColumnType("varchar(14)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("School")
                        .HasColumnName("school")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("varchar(6)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("StudentNumber")
                        .HasColumnName("student_number")
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Account")
                        .HasName("PRIMARY");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DaisyDBProject.Models.Application", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Application")
                        .HasForeignKey("Account")
                        .HasConstraintName("application_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Usergroups", "Usergroups")
                        .WithMany("Application")
                        .HasForeignKey("GroupId", "ProjectId")
                        .HasConstraintName("application_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Comment", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Comment")
                        .HasForeignKey("Account")
                        .HasConstraintName("comment_ibfk_1")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Moment", "Moment")
                        .WithMany("Comment")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("comment_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Discussion", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Discussion")
                        .HasForeignKey("Account")
                        .HasConstraintName("discussion_ibfk_1")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Project", "Project")
                        .WithMany("Discussion")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("discussion_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.FavouritePackage", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("FavouritePackage")
                        .HasForeignKey("Account")
                        .HasConstraintName("favourite_package_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Follow", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("FollowAccountNavigation")
                        .HasForeignKey("Account")
                        .HasConstraintName("follow_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Users", "FollowedAccountNavigation")
                        .WithMany("FollowFollowedAccountNavigation")
                        .HasForeignKey("FollowedAccount")
                        .HasConstraintName("follow_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.GroupMessage", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Usergroups", "Usergroups")
                        .WithMany("GroupMessage")
                        .HasForeignKey("GroupId", "ProjectId")
                        .HasConstraintName("group_message_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.LeaveMessage", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("LeaveMessage")
                        .HasForeignKey("Account")
                        .HasConstraintName("leave_message_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.LiftBan", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("LiftBan")
                        .HasForeignKey("Account")
                        .HasConstraintName("lift_ban_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.LikeDisc", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("LikeDisc")
                        .HasForeignKey("Account")
                        .HasConstraintName("like_disc_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Discussion", "Discussion")
                        .WithMany("LikeDisc")
                        .HasForeignKey("DiscussionId", "ProjectId")
                        .HasConstraintName("like_disc_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.LikeMoment", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("LikeMoment")
                        .HasForeignKey("Account")
                        .HasConstraintName("like_moment_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Moment", "Moment")
                        .WithMany("LikeMoment")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("like_moment_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Member", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Member")
                        .HasForeignKey("Account")
                        .HasConstraintName("member_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Usergroups", "Usergroups")
                        .WithMany("Member")
                        .HasForeignKey("GroupId", "ProjectId")
                        .HasConstraintName("member_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Message", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "ReceiveAccountNavigation")
                        .WithMany("MessageReceiveAccountNavigation")
                        .HasForeignKey("ReceiveAccount")
                        .HasConstraintName("message_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Users", "SendAccountNavigation")
                        .WithMany("MessageSendAccountNavigation")
                        .HasForeignKey("SendAccount")
                        .HasConstraintName("message_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Moment", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Moment")
                        .HasForeignKey("Account")
                        .HasConstraintName("moment_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.MomentStar", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Moment", "Moment")
                        .WithMany("MomentStar")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("moment_star_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.FavouritePackage", "FavouritePackage")
                        .WithMany("MomentStar")
                        .HasForeignKey("Account", "Name")
                        .HasConstraintName("moment_star_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Notification", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Project", "Project")
                        .WithMany("Notification")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("notification_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Post", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Usergroups", "Usergroups")
                        .WithMany("Post")
                        .HasForeignKey("GroupId", "ProjectId")
                        .HasConstraintName("post_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.PostStar", b =>
                {
                    b.HasOne("DaisyDBProject.Models.FavouritePackage", "FavouritePackage")
                        .WithMany("PostStar")
                        .HasForeignKey("Account", "Name")
                        .HasConstraintName("post_star_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Post", "Post")
                        .WithMany("PostStar")
                        .HasForeignKey("PostId", "ProjectId", "GroupId")
                        .HasConstraintName("post_star_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Reply", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Reply")
                        .HasForeignKey("Account")
                        .HasConstraintName("reply_ibfk_1")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Comment", "Comment")
                        .WithMany("Reply")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("reply_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReplyReply", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Reply", "IdRepliedNavigation")
                        .WithMany("ReplyReplyIdRepliedNavigation")
                        .HasForeignKey("IdReplied")
                        .HasConstraintName("reply_reply_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Reply", "IdToReplyNavigation")
                        .WithMany("ReplyReplyIdToReplyNavigation")
                        .HasForeignKey("IdToReply")
                        .HasConstraintName("reply_reply_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Report", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Report")
                        .HasForeignKey("Account")
                        .HasConstraintName("report_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportCom", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Comment", "Comment")
                        .WithMany("ReportCom")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("report_com_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Report", "Report")
                        .WithMany("ReportCom")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("report_com_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportDisc", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Report", "Report")
                        .WithMany("ReportDisc")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("report_disc_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Discussion", "Discussion")
                        .WithMany("ReportDisc")
                        .HasForeignKey("DiscussionId", "ProjectId")
                        .HasConstraintName("report_disc_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportMom", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Moment", "Moment")
                        .WithMany("ReportMom")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("report_mom_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Report", "Report")
                        .WithMany("ReportMom")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("report_mom_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.ReportReply", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Reply", "Reply")
                        .WithMany("ReportReply")
                        .HasForeignKey("ReplyId")
                        .HasConstraintName("report_reply_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Report", "Report")
                        .WithMany("ReportReply")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("report_reply_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Subscribe", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("Subscribe")
                        .HasForeignKey("Account")
                        .HasConstraintName("subscribe_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Project", "Project")
                        .WithMany("Subscribe")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("subscribe_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.UserGroupMessage", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("UserGroupMessage")
                        .HasForeignKey("Account")
                        .HasConstraintName("user_group_message_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.GroupMessage", "GroupMessage")
                        .WithMany("UserGroupMessage")
                        .HasForeignKey("GroupMessageId")
                        .HasConstraintName("user_group_message_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.UserNotice", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("UserNotice")
                        .HasForeignKey("Account")
                        .HasConstraintName("user_notice_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Notice", "Notice")
                        .WithMany("UserNotice")
                        .HasForeignKey("NoticeId")
                        .HasConstraintName("user_notice_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.UserNotifi", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "AccountNavigation")
                        .WithMany("UserNotifi")
                        .HasForeignKey("Account")
                        .HasConstraintName("user_notifi_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Notification", "Notification")
                        .WithMany("UserNotifi")
                        .HasForeignKey("NotifiId", "ProjectId")
                        .HasConstraintName("user_notifi_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DaisyDBProject.Models.Usergroups", b =>
                {
                    b.HasOne("DaisyDBProject.Models.Users", "LeaderAccountNavigation")
                        .WithMany("Usergroups")
                        .HasForeignKey("LeaderAccount")
                        .HasConstraintName("usergroups_ibfk_2")
                        .IsRequired();

                    b.HasOne("DaisyDBProject.Models.Project", "Project")
                        .WithMany("Usergroups")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("usergroups_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
